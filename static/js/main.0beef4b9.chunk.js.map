{"version":3,"sources":["logo.svg","Component/CvsUploader.js","Component/XlsxUploader.js","Component/DragAndDrop.js","Component/FileList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CvsUploader","handleOnDrop","data","console","log","handleOnError","err","file","inputElem","reason","handleOnRemoveFile","onDrop","this","onError","addRemoveButton","onRemoveFile","Component","XlsxUploader","handleInputChange","e","preventDefault","f","target","files","reader","FileReader","onload","result","readedData","XLSX","type","wsname","SheetNames","ws","Sheets","dataParse","sheet_to_json","header","readAsBinaryString","Fragment","required","name","id","onChange","event","placeholder","DragAndDrop","state","drag","dropRef","React","createRef","handleDrag","stopPropagation","handleDragIn","dragCounter","dataTransfer","items","length","setState","handleDragOut","handleDrop","props","clearData","div","current","addEventListener","removeEventListener","style","display","position","ref","dragging","classname","className","children","FileList","fileList","i","push","height","width","map","key","App","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0beef4b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nimport { CSVReader } from 'react-papaparse';\r\n\r\nclass CvsUploader extends Component {\r\n    handleOnDrop = (data) => {\r\n        console.log('---------------------------')\r\n        console.log(data)\r\n        console.log('---------------------------')\r\n      }\r\n    \r\n      handleOnError = (err, file, inputElem, reason) => {\r\n        console.log(err)\r\n      }\r\n    \r\n      handleOnRemoveFile = (data) => {\r\n        console.log('---------------------------')\r\n        console.log(data)\r\n        console.log('---------------------------')\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <CSVReader\r\n            onDrop={this.handleOnDrop}\r\n            onError={this.handleOnError}\r\n            addRemoveButton\r\n            onRemoveFile={this.handleOnRemoveFile}\r\n          >\r\n            <span>Drop CSV file here or click to upload.</span>\r\n          </CSVReader>\r\n        )\r\n      }\r\n    }\r\nexport default CvsUploader;\r\n","import React, { Component } from 'react';\r\n\r\nimport * as XLSX from 'xlsx';\r\n\r\nclass XlsxUploader extends Component {\r\n    handleInputChange=(e)=>{   \r\n        e.preventDefault();\r\n        var files = e.target.files, f = files[0];\r\n        var reader = new FileReader();\r\n        reader.onload = function (e) {\r\n            var data = e.target.result;\r\n            let readedData = XLSX.read(data, {type: 'binary'});\r\n            const wsname = readedData.SheetNames[0];\r\n            const ws = readedData.Sheets[wsname];\r\n    \r\n            /* Convert array to json*/\r\n            const dataParse = XLSX.utils.sheet_to_json(ws, {header:1});\r\n            console.log(dataParse)\r\n            //setFileUploaded(dataParse);\r\n        };\r\n        reader.readAsBinaryString(f)\r\n        /*\r\n        console.log(file)\r\n        const target=event.target\r\n        const value=event.value\r\n        const name=event.name\r\n        const this2=this\r\n        console.log(value)\r\n        //this.setState({[name]:value})\r\n        let hojas=[]\r\n        console.log(target)\r\n        if(name==='file'){\r\n            console.log('oli')\r\n            let reader = new FileReader()\r\n            reader.readAsArrayBuffer(target.files[0])\r\n            reader.onloadend=(e)=>{\r\n                var data=new Uint8Array(e.target.result);\r\n                var worbook=XLSX.read(data,{tipe:'array'});\r\n\r\n                worbook.SheetNames.forEach(function(SheetName){\r\n                    //Mi objeto\r\n                    var XL_row_object=XLSX.utils.sheet_to_row_object_array(worbook.Sheets[SheetName]);\r\n\r\n                    hojas.push({\r\n                        data:XL_row_object,\r\n                        SheetName\r\n                    })\r\n                    console.log(hojas)\r\n                    this2.setState({\r\n                        selectedFileDocument:target.files[0],\r\n                        hojas\r\n                    })\r\n                })\r\n            }\r\n        }\r\n        */\r\n\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <React.Fragment>\r\n                <input\r\n                required\r\n                type=\"file\"\r\n                name=\"file\"\r\n                id=\"file\"\r\n                onChange={(event)=>this.handleInputChange(event)}\r\n                placeholder=\"Archivo Excel\"\r\n                /> \r\n\r\n                \r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nexport default  XlsxUploader;","import React, { Component } from 'react';\r\nimport './DragAndDrop.css';\r\n\r\nclass DragAndDrop extends Component {\r\n  state = {\r\n    drag: false\r\n  }\r\n  dropRef = React.createRef()\r\n  handleDrag = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n  }\r\n  handleDragIn = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    this.dragCounter++\r\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\r\n      this.setState({drag: true})\r\n    }\r\n  }\r\n  handleDragOut = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    this.dragCounter--\r\n    if (this.dragCounter === 0) {\r\n      this.setState({drag: false})\r\n    }\r\n  }\r\n  handleDrop = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    this.setState({drag: false})\r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      this.props.handleDrop(e.dataTransfer.files)\r\n      e.dataTransfer.clearData()\r\n      this.dragCounter = 0    \r\n    }\r\n  }\r\n  componentDidMount() {\r\n    let div = this.dropRef.current\r\n    div.addEventListener('dragenter', this.handleDragIn)\r\n    div.addEventListener('dragleave', this.handleDragOut)\r\n    div.addEventListener('dragover', this.handleDrag)\r\n    div.addEventListener('drop', this.handleDrop)\r\n  }\r\n  componentWillUnmount() {\r\n    let div = this.dropRef.current\r\n    div.removeEventListener('dragenter', this.handleDragIn)\r\n    div.removeEventListener('dragleave', this.handleDragOut)\r\n    div.removeEventListener('dragover', this.handleDrag)\r\n    div.removeEventListener('drop', this.handleDrop)\r\n  }\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{display: 'inline-block', position: 'relative'}}\r\n        ref={this.dropRef}\r\n      >\r\n        {this.state.dragging?\r\n          <div classname=\"Dashed\">\r\n            <div>drop here :)</div>\r\n          </div>:            \r\n        <div  className=\"noDashed\">\r\n            {this.props.children}\r\n        </div>    \r\n        }\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default DragAndDrop;","import React, { Component } from 'react'\r\nimport DragAndDrop from './DragAndDrop'\r\nclass FileList extends Component {\r\n    state = {\r\n        files: [\r\n            'Arrastra aqui tu archivo'\r\n\r\n        //'Coquito ABC.pdf',\r\n        ]\r\n    }\r\n    handleDrop = (files) => {\r\n        let fileList = this.state.files\r\n        for (var i = 0; i < files.length; i++) {\r\n        if (!files[i].name) return\r\n        fileList.push(files[i].name)\r\n        }\r\n        this.setState({files: fileList})\r\n    }\r\n    render() {\r\n        return (\r\n        <DragAndDrop handleDrop={this.handleDrop}>\r\n            <div style={{height: 20, width: 250}}>\r\n            {this.state.files.map((file) =>\r\n                <div key={file.i}>{file}</div>\r\n            )}\r\n            </div>\r\n        </DragAndDrop>\r\n        )\r\n  }\r\n}\r\nexport default FileList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CvsUploader from './Component/CvsUploader'\nimport XlsxUploader from './Component/XlsxUploader'\n\nimport FileList from './Component/FileList'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <CvsUploader></CvsUploader>\n      <XlsxUploader></XlsxUploader>\n      <FileList></FileList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}